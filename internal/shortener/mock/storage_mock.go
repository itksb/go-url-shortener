// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_shortener is a generated GoMock package.
package mock_shortener

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	shortener "github.com/itksb/go-url-shortener/internal/shortener"
)

// MockShortenerStorage is a mock of ShortenerStorage interface.
type MockShortenerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerStorageMockRecorder
}

// MockShortenerStorageMockRecorder is the mock recorder for MockShortenerStorage.
type MockShortenerStorageMockRecorder struct {
	mock *MockShortenerStorage
}

// NewMockShortenerStorage creates a new mock instance.
func NewMockShortenerStorage(ctrl *gomock.Controller) *MockShortenerStorage {
	mock := &MockShortenerStorage{ctrl: ctrl}
	mock.recorder = &MockShortenerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerStorage) EXPECT() *MockShortenerStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockShortenerStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockShortenerStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockShortenerStorage)(nil).Close))
}

// DeleteURLBatch mocks base method.
func (m *MockShortenerStorage) DeleteURLBatch(ctx context.Context, userID string, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURLBatch", ctx, userID, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURLBatch indicates an expected call of DeleteURLBatch.
func (mr *MockShortenerStorageMockRecorder) DeleteURLBatch(ctx, userID, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLBatch", reflect.TypeOf((*MockShortenerStorage)(nil).DeleteURLBatch), ctx, userID, ids)
}

// GetStats mocks base method.
func (m *MockShortenerStorage) GetStats(ctx context.Context) (shortener.InternalStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(shortener.InternalStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockShortenerStorageMockRecorder) GetStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockShortenerStorage)(nil).GetStats), ctx)
}

// GetURL mocks base method.
func (m *MockShortenerStorage) GetURL(ctx context.Context, id string) (shortener.URLListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, id)
	ret0, _ := ret[0].(shortener.URLListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockShortenerStorageMockRecorder) GetURL(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockShortenerStorage)(nil).GetURL), ctx, id)
}

// ListURLByUserID mocks base method.
func (m *MockShortenerStorage) ListURLByUserID(ctx context.Context, userID string) ([]shortener.URLListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListURLByUserID", ctx, userID)
	ret0, _ := ret[0].([]shortener.URLListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListURLByUserID indicates an expected call of ListURLByUserID.
func (mr *MockShortenerStorageMockRecorder) ListURLByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListURLByUserID", reflect.TypeOf((*MockShortenerStorage)(nil).ListURLByUserID), ctx, userID)
}

// SaveURL mocks base method.
func (m *MockShortenerStorage) SaveURL(ctx context.Context, url, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, url, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockShortenerStorageMockRecorder) SaveURL(ctx, url, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockShortenerStorage)(nil).SaveURL), ctx, url, userID)
}
